<html window-frame="extended" window-resizable="true" window-state="maximized" window-icon="assets/Icon.svg">
<header>
  <window-caption role=window-caption>Tape</window-caption>
  <window-buttons>
    <window-button role="window-minimize"></window-button>
    <window-button role="window-maximize"></window-button>
    <window-button role="window-close"></window-button>
  </window-buttons>
</header>
<head>

<script type="module" src="storage/check-instance.js"/>
<script type="module">
  import { PLATFORM } from "@env";
  import { BigNumEnv } from "./parser/bignum.js";
  Window.this.mediaVars({platform: PLATFORM});
  BigNumEnv.initLocale();
</script>

<title>QwikTape</title>
<style src="window.css"/>

<script type="module">
  import { BigNumEnv } from "./parser/bignum.js";
  import { Storage, getTapesDirectory } from "./storage/storage.js";
  import { Tabs, BrowseStorage, Editor, SettingsForm } from "./components/index.js";
  import { toPdf, hasPdf } from "./util/pdf.js";

  class App extends Element {
    currentTape;
    tabs;
    settings;

    constructor(props) {
      super();
      this.currentTape = Storage.currentTape();
      this.settings = Storage.getSettings() ?? {decimalDigits: 2, padding: 12};
    }
    
    componentDidMount(){
      this.tabs = document.$("header > window-caption");
    }
    
    refreshTabs(objdata){
      this.tabs.postEvent(new Event("refresh", {data: objdata}));      
    }
    
    ["on close-tape"](evt, el) {
      const index = evt.data;
      const  previousTape = Storage.closeIndex(index);
      this.componentUpdate({currentTape: previousTape});
      this.refreshTabs({
        recent: Storage.recent(),
        activeId: previousTape.id,
      });
    }
    
    ["on add-tape"](evt, el) {
     const newTape = new Storage("");
      this.componentUpdate({currentTape: newTape});
      this.refreshTabs({
        recent: Storage.recent(),
        activeId: newTape.id,
      }); 
    }

    ["on switch-tape"](evt)=>{
      const id = evt.data;
      const openTape = Storage.getById(id);
      this.componentUpdate({currentTape: openTape});
      this.refreshTabs({ activeId: openTape.id });
    }

    ["on open-tape"](evt)=>{
      const id = evt.data;
      const openTape = Storage.getById(id);
      this.componentUpdate({currentTape: openTape});
      this.refreshTabs({
        recent: Storage.recent(),
        activeId: openTape.id,
      });
    }
    
    ["on delete-tape"](evt, el) {
      const id = evt.data;
      const openTape = Storage.delete(id);
      this.componentUpdate({currentTape: openTape});
      this.refreshTabs({
        recent: Storage.recent(),
        activeId: openTape.id,
      });
    }

    ["on rename-tape"](evt, el) {
      const {tape, name} = evt.data;
      Storage.rename(tape, name);
      this.refreshTabs({
        recent: Storage.recent(),
        activeId: tape.id,
      });
    }
    
    ["on browse-tapes"](evt, el) {
      this.componentUpdate({browse: !this.browse});      
    }

    ["on settings-changed"](evt, form){
      Storage.saveSettings(evt.data);
      BigNumEnv.setDecimalDigits(evt.data.decimalDigits);
      this.componentUpdate({settings: evt.data});
    }
    
    ["on click at :root section.editor > div.controls > #pdf"](evt, el)=>{
      const name = this.currentTape.name;
      const file = Window.this.selectFile({
        mode: 'save',
        filter: "PDF File (*.pdf, *.PDF)|*.pdf|All Files (*.*)|*.*",
        caption: "Save PDF as",
        path: `${name}.pdf`
      });

      if(!file) return;
      
      Window.post(new Event("to-pdf", { 
        bubbles: true, 
        data: (val)=>{
          toPdf(val,URL.toPath(file))
        }
      }));
    }
    
    ["on click at :root > section.sidepanel > #close"](evt, el) {
      this.componentUpdate({browse: !this.browse});      
    }

    ["on click at :root section.editor > div.controls > #settings"](evt, el){
      this.componentUpdate({showSettings: true});
    }
    
    ["on settings-close"](evt, el){
      this.componentUpdate({showSettings: false});    
    }

    render(props,kids){
      return <body styleset={__DIR__+"main.css#main"}>
        {
          this.browse && 
          <section.sidepanel>
            <BrowseStorage current={this.currentTape.id} list={Storage.all()}/>
          </section>
        }
        <section.editor>
          <Editor tape={this.currentTape} settings={this.settings}/>
          <div.controls>
            { !this.showSettings && <button #settings/> }
            { hasPdf() && <button #pdf/> }
          </div>
        </section>
        { this.showSettings && <SettingsForm formData={this.settings}/> }
      </body>;
    }
  }

  document.$("header > window-caption").patch(<Tabs recent={Storage.recent()} activeId={Storage.lastId()}/>);
  document.body.patch(<App/>);
</script>
</head>

<body>
</body>

</html>
