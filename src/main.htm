<html window-frame="extended" window-resizable="true" window-icon="assets/Icon.svg">
<header>
  <window-caption role=window-caption>Tape</window-caption>
  <window-buttons>
    <window-button role="window-minimize"></window-button>
    <window-button role="window-maximize"></window-button>
    <window-button role="window-close"></window-button>
  </window-buttons>
</header>
<head>

<script type="module" src="storage/check-instance.js"/>
<script type="module">
  import { PLATFORM } from "@env";
  import { BigNumEnv } from "./parser/bignum.js";
  BigNumEnv.initLocale();

  Window.this.mediaVars({platform: PLATFORM});
  
  function setMediaVars() {
      const [x, y, w, h] = Window.this.box("xywh", "border", "screen", true);
      Window.this.mediaVar("window-width", w);
  }

  function setWindowState() {
      const [x, y, w, h] = Window.this.box("xywh", "border", "screen", true);
      const maximized = Window.this.state == Window.WINDOW_MAXIMIZED;
      
      Window.this.mediaVar("window-width", w);
      
      Window.post(new Event("save-window-state", {
        bubbles: true, 
        data: {maximized, x, y, w, h}
      }), true);
  }

  function saveWindowState() {
    document.timer(1000, setWindowState);
  }

  Window.this
    .on("move", saveWindowState)
    .on("size", saveWindowState)
    .on("size", setMediaVars);

  document.on("beforeunload", function(){
    Window.this.off(setMediaVars);
    Window.this.off(saveWindowState);
  });

</script>

<title>QwikTape</title>
<style src="window.css"/>

<script type="module" defer>
  import { BigNumEnv } from "./parser/bignum.js";
  import { Storage, getTapesDirectory } from "./storage/storage.js";
  import { Tabs, BrowseStorage, Editor, SettingsForm } from "./components/index.js";
  import { hasPdf } from "./util/pdf.js";

  class App extends Element {
    currentTape;
    tabs;
    settings;

    constructor(props) {
      super();
      this.restoreWindowState();
      this.currentTape = Storage.currentTape();
      this.settings = Storage.getSettings() ?? {decimalDigits: 2, padding: 12};
    }
    
    componentDidMount(){
      this.tabs = document.$("header > window-caption");
      this.onGlobalEvent("save-window-state", (evt)=>{
        Storage.saveWindowState(evt.data);
      });
    }
    
    componentWillUnmount(){
      this.off("save-window-state");
    }

    restoreWindowState() {
      const winPos = Storage.getWindowState();
      if(winPos?.maximized){
        Window.this.state = Window.WINDOW_MAXIMIZED;
      }
      else {
        Window.this.move(winPos.x, winPos.y);
        Window.this.move(winPos.x, winPos.y, winPos.w, winPos.h);
      }  
    }
    
    refreshTabs(state){
      this.tabs.postEvent(new Event("refresh", {data: state}));      
    }
    
    saveCaretPosition(){
      const editor = this.$('plaintext#tape');
      const [startLine, startOffset] = editor.plaintext.selectionStart;
      const [endLine, endOffset] = editor.plaintext.selectionEnd;
      this.currentTape.caretAt = {startLine, startOffset, endLine, endOffset};
    }
    
    ["on close-tape"](evt, el) {
      const index = evt.data;
      const  previousTape = Storage.closeIndex(index);
      this.componentUpdate({currentTape: previousTape});
      this.refreshTabs({
        recent: Storage.recent(),
        activeId: previousTape.id,
      });
    }
    
    ["on add-tape"](evt, el) {
     const newTape = new Storage("");
      this.componentUpdate({currentTape: newTape});
      this.refreshTabs({
        recent: Storage.recent(),
        activeId: newTape.id,
      }); 
    }

    ["on switch-tape"](evt)=>{
      this.saveCaretPosition();
      const id = evt.data;
      const openTape = Storage.getById(id);
      this.componentUpdate({currentTape: openTape});
      this.refreshTabs({ activeId: openTape.id });
    }

    ["on cycle-tape"](evt)=>{
      this.saveCaretPosition();
      let index = parseInt(evt.data);
      const  recent = Storage.recent();
      if( index >= recent.length -1 ) {
        index = -1;
      }
      const nextTape = recent[index + 1];
      this.componentUpdate({currentTape: nextTape});
      this.refreshTabs({
        recent: Storage.recent(),
        activeId: nextTape.id,
      });
    }

    ["on open-tape"](evt)=>{
      this.saveCaretPosition();
      const id = evt.data;
      const openTape = Storage.getById(id);
      this.componentUpdate({currentTape: openTape});
      this.refreshTabs({
        recent: Storage.recent(),
        activeId: openTape.id,
      });
    }
    
    ["on delete-tape"](evt, el) {
      const id = evt.data;
      const openTape = Storage.delete(id);
      this.componentUpdate({currentTape: openTape});
      this.refreshTabs({
        recent: Storage.recent(),
        activeId: openTape.id,
      });
    }

    ["on rename-tape"](evt, el) {
      const {tape, name} = evt.data;
      Storage.rename(tape, name);
      this.refreshTabs({
        recent: Storage.recent(),
        activeId: tape.id,
      });
    }
    
    ["on browse-tapes"](evt, el) {
      this.componentUpdate({browse: !this.browse, showSettings: false});      
    }

    ["on settings-changed"](evt, form){
      Storage.saveSettings(evt.data);
      BigNumEnv.setDecimalDigits(evt.data.decimalDigits);
      this.componentUpdate({settings: evt.data});
    }
    
    ["on click at :root #pdf"](evt, el)=>{
      const name = this.currentTape.name;
      const file = Window.this.selectFile({
        mode: 'save',
        filter: "PDF File (*.pdf, *.PDF)|*.pdf|All Files (*.*)|*.*",
        caption: "Save PDF as",
        path: `${name}.pdf`
      });

      if(!file) return;
      
      const editor = this.$(":root > .editor > plaintext");
      editor.exportPdf(URL.toPath(file));
    }
    
    ["on click at :root > section.sidepanel > #close"](evt, el) {
      this.componentUpdate({browse: !this.browse});      
    }

    ["on click at :root section.editor > div.controls > #settings"](evt, el){
      this.componentUpdate({showSettings: true, browse: false});
    }
    
    ["on settings-close"](evt, el){
      this.componentUpdate({showSettings: false});    
    }
    
    ["on ^keydown at :root"](evt, el){
      if(evt.ctrlKey){
        switch(evt.code){
          case 'KeyW':
            this.postEvent(new Event("close-tape", {bubbles: true, data: this.tabs.currentIndex}));
            return;
          break;
          case 'KeyT':
          case 'KeyN':
            this.postEvent(new Event("add-tape", {bubbles: true}));
          break;
          case 'Tab':
            this.postEvent(new Event("cycle-tape", {bubbles: true, data: this.tabs.currentIndex}));            
          break;
          default:
            return;
        }
        
        return true;
      }
    }

    ["on keydown at :root"](evt, el){
      if(evt.code !== 'Escape') return;

      let reply = Window.this.modal(
        <alert caption={'qwiktape'}>
          <content>Exiting qwiktape?</content>
          <buttons>
             <button id="yes" role="default-button" accesskey="!KeyY">Yes</button>
             <button id="no" role="cancel-button" accesskey="!KeyN">No</button>
          </buttons>
        </alert>
      );
      
      if(reply === "yes") {
        this.post(() => Window.this.close());
        return true;
      }
    }

    render(props,kids){
      return <body styleset={__DIR__+"main.css#main"}>
        {
          this.browse && 
          <section.sidepanel.files>
            <BrowseStorage current={this.currentTape.id} list={Storage.all()}/>
          </section>
        }
        <section.editor cols=1 page-template="page-template.htm">
          <Editor tape={this.currentTape} settings={this.settings}/>
          <div.controls>
            { !this.showSettings && <button #settings/> }
            { hasPdf() && <button #pdf/> }
          </div>
        </section>
        { 
          this.showSettings && 
          <section.sidepanel>
            <SettingsForm formData={this.settings}/>
          </section>  
        }  
      </body>;
    }
  }

  document.$("header > window-caption").patch(<Tabs recent={Storage.recent()} activeId={Storage.lastId()}/>);
  document.body.patch(<App/>);
</script>

</head>

<body>
</body>

</html>
